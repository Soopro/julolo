core = require('core.js')
utils = require('utils.js')
restStore = require('restapi/store.js')


# app
App
  project:
    name: 'Julolo Mini'
    version: '1.4.5'
    creator: [
      'Redyyu'
    ]

  # trigger
  onLaunch: (opts)->
    self = @
    console.info 'Julolo Launched...'
    console.info '-------------------'
    console.info self.project.name
    console.info self.project.version
    console.info self.project.creator.join(', ')
    if opts.query.api
      core.config.baseURL.api = opts.query.api
    restStore.store.get()
    .then (store)->
      self.store = store

  # global data
  g: {}
  store: {}
  cart: new core.Cart()

  # methods
  enter_item: (item)->
    return if not item
    self = @
    self.g.current_item = item
    self.goto
      route: core.config.paths.item
      query:
        id: item.id

  goto: (opts, auth_required)->
    self = @
    if wx.getStorageSync('auth') or not auth_required
      target_url = opts.route
      joiner = '?'
      for k, v of opts.query
        if k and v
          target_url = target_url + joiner + k + '=' + v
          joiner = '&'

      nav_fn = opts.method or wx.navigateTo
      nav_fn
        url: target_url
    else
      warp_point =
        route: opts.route or ''
        query: opts.query or {}
      wx.setStorageSync('warp_point', warp_point)
      wx.redirectTo
        url: core.config.paths.login

  back: (delta)->
    wx.navigateBack
      delta: delta or 1

  chown: (user_id)->
    auth = wx.getStorageSync('auth') or {}
    return auth.id == user_id and user_id

  get_profile: (callback)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    if not self.g.profile
      self.g.profile = wx.getStorageSync('profile') or {}
    callback(self.g.profile)

  sync_profile: (callback)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    core.authorize_run
      scope: 'scope.userInfo'
      required: true
    , (info)->
      wx.getUserInfo
        success: (data)->
          profile = core.make_profile(data.userInfo)
          self.g.profile = profile
          wx.setStorageSync('profile', profile)
          callback(self.g.profile)

  share: (opts)->
    self = @
    opts = self.store if not opts

    image_url = opts.splash or opts.src
    title = opts.title

    share_opts =
      title: title
      imageUrl: image_url
    if opts.is_extra
      share_opts.path = core.config.paths.index
    return share_opts


  parse_coupon: (coupon_info)->
    regex = /减(\d+)元?/gi
    regex2 = /(\d+)元无条件/gi
    try
      matched = regex.exec(coupon_info) or regex2.exec(coupon_info)
    catch
      matched = null

    if matched and utils.isString(matched[1])
      return matched[1] + '元券'
    else
      return ''

  show_coupon: (opts)->
    wx.setClipboardData
      data: opts.code or '...'
    core.dialog.alert
      title: opts.code
      content: opts.msg

  go_cart: ->
    wx.switchTab
      url: core.config.paths.user

  go_error: ->
    wx.redirectTo
      url: core.config.paths.error

  re_launch: (clear)->
    self = @
    wx.reLaunch
      url: core.config.paths.index


  debug: ->
    user = wx.getStorageSync('auth')
    return if not user.supervisor
    debug = not Boolean(wx.getStorageSync('debug'))
    wx.setEnableDebug
      enableDebug: debug
      success: ->
        wx.setStorageSync('debug', debug)
